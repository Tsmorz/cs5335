%% Tony Smoragiewicz
% V3 - RANSAC

close all
format short
format compact
file = 'ex5_data/ptcloud.mat';
w = warning ('off','all');
[xyz, rgb] = loadScan(file);


%% Find image planes
figure(2)
subplot(2,1,1)
view(-45, 30)
hold on
plotData(xyz, 'b.')
axis('equal')

subplot(2,1,2)
view(-45, 30)
axis('equal')
hold on

e = [0.80, 0.85, 0.90];
marker = {'r.', 'k.', 'y.'};
s = 3;
threshold = 0.01;
% search for three planes
for i = 1:3
        [inliers, ~] = RANSAC2(xyz, e(i), s, threshold, string(marker{i}));

        % remove plane from data set
        xyz = rmvPlane(inliers, xyz);
end
plotData(xyz, 'b.');
% 
% 
% %% Identify ball and can
% limits = [min(min(xyz(:,:,1))), max(max(xyz(:,:,1)));
%              min(min(xyz(:,:,2))), max(max(xyz(:,:,2)));
%              min(min(xyz(:,:,3))), max(max(xyz(:,:,3)))];

% get random point within limit
% point and radius
% point, radius, normal vector as table


% sample a point
% e = 0.8;
% s = 2;
% threshold = 0.01;
% [inliers, ~] = RANSAC2(xyz, e, s, 'g*');
[num, idx] = numObjects(xyz);

marker = {'m.', 'g.', 'c.'};
for i = 1:num
        loc =  find(idx==i)';
        [r, ~, ~] = size(xyz);
        inliers = [mod(loc, r); ceil(loc/r)]';
        size(inliers)
        xyz_u = unwrap(data);
        plot3(xyz_u(loc,1), xyz_u(loc,2)), marker{i})

end


% for i = 1:3
%         radius = 0.01;
%         [u, v] = randPoint(xyz);
%         n = eigenNorm(u, v, radius, xyz);
% end

%% Random u,v coordinate with real xyz value
%       u,v must be one radius away from edge
function [u, v] = randPoint(data)

        [r, c, ~] = size(data);
        u = randi(r);
        v = randi(c);
        point = data(u, v, :);

        while isnan(point)
                u = randi(r);
                v = randi(c);
                point = data(u, v, :);
        end

end

%% Surface Normal from point
function [normal] = eigenNorm(u,v, radius, data)

        center = data(u, v, :);
        center = reshape(center, [1, 3]);

        xyz = unwrap(data);

        dist = sqrt( sum( (xyz-center).^2, 2 ) );
        points = xyz(dist<radius, :);
        size(points)

        mu = mean(points, 1, 'omitnan');
        pdiff = points - mu;

        Sigma = pdiff' * pdiff;
        [vec, lambda] =eig(Sigma);

        lambda = [lambda(1,1), lambda(2,2), lambda(3,3)];
        idx = find(lambda == min(lambda));
        normal = vec(:, idx)';

        ratio = min(lambda) / max(lambda);
        if ratio > 0.01
                ratio
                plot3(points(:,1), points(:,2), points(:,3), 'g*')
                quiver3(center(1), center(2), center(3), 0.1*normal(1), 0.1*normal(2), 0.1*normal(3), 'g')
        end
end


%% Identify number of objects in scene
function [num, idx] = numObjects(data)

        unwrapped = unwrap(data);
        maxNum = 10;
        value = zeros([maxNum-1,1]);
        for K = 2:maxNum
                [~, C] = kmeans(unwrapped, K);
        
                dist = zeros([K-1,1]);
                for i = 1:K
                        tmp = zeros([K-1,1]);
                        for j = 1:K
                                tmp(j) = norm(C(i,:) - C(j,:));
                        end
                        tmp(i) = max(tmp);
                        dist(i) = min(tmp);
                end
                value(K-1) = K^2*min(dist)^3;
        end
        
        idx = find(value == max(value));
        K = idx+1;
        [idx, C] = kmeans(unwrapped, K);
        for i = 1:K
                plot3(C(i,1), C(i,2), C(i,3), 'c*')
        end
        size(idx)
       
        num = K;

% %         size(idx)
%         loc = find(idx(idx==4))
%         idx(loc)
%         for i = 1:1%K
%                 loc = find(idx(idx==K));
%                 [r, ~, ~] = size(data);
%                 %inliers = [mod(loc, r), ceil(loc/r)];
%                 unwrapped(loc,1);
%                 plot3(unwrapped(idx(loc),1), unwrapped(idx(loc),2), unwrapped(idx(loc),3), 'c.')
%         end

end


%% Unwrap sensor matrix to a row
function row_vec = unwrap(data)
        [r, c, ~] = size(data);
        x = data(:,:, 1);
        x = reshape(x, [r*c, 1]);
        
        y = data(:,:, 2);
        y = reshape(y, [r*c, 1]);
        
        z = data(:,:, 3);
        z = reshape(z, [r*c, 1]);

        row_vec = [x, y, z];

end


%% Remove points on plane from cloud
function clean =  rmvPlane(inliers, data)
        [r, ~] = size(inliers);
        for i = 1:r
                data(inliers(i,1), inliers(i,2), :) = nan;
        end
        clean = data;
end

%% Alternate surface norm
function [normal, xyz] = surfNorm(u, v, xyz)
        p1 = [xyz(u(1), v(1), 1), ...
                xyz(u(1), v(1), 2), ...
                xyz(u(1), v(1), 3)];

        p2 = [xyz(u(2), v(2), 1), ...
                xyz(u(2), v(2), 2), ...
                xyz(u(2), v(2), 3)];

        p3 = [xyz(u(3), v(3), 1), ...
                xyz(u(3), v(3), 2), ...
                xyz(u(3), v(3), 3)];

        U = p2 - p1;
        V = p3 - p1;

        normal = cross(U,V) / norm(cross(U,V));
        xyz = mean([p1; p2; p3], 1);

end

%% RANSAC
% inliers = RANSAC(data, e, s, threshold):
% e - portion outliers
% s - num of points in sample
function [inliers, model] = RANSAC2(data, e, s, threshold, marker)

        % Add a column of 1's to the end
        [r, c, ~] = size(data);
        realPoints = sum(sum(~isnan(data(:,:,1))));
        
        % probability that one sample is clean
        p = 0.99;

        % number of samples needed
        N = round( log(1-p) / log(1-(1-e)^s) );
        
        % Stop search when this number has been reached
        sample = 0.005;
        T = sample * (1-e)*realPoints;

        % num of points to compare against from data set
        rows = round(sample*realPoints);

        % Number of points within threshold distance
        num = 0;

        i = 1;
        while i < N
                % try a random set points that fits the model
                u = zeros([1, s]);
                v = zeros([1, s]);
                j = 1;
                while j <= s
                        tmp_u = randi(r);
                        tmp_v = randi(c);
                        point = data(tmp_u, tmp_v, :);
                        if ~isnan(point)
                                u(j) = tmp_u;
                                v(j) = tmp_v;
                                j = j + 1;
                        end
                end

                % find the surface normal of the plane
                [temp_n, temp_xyz0] = surfNorm(u, v, data);

                temp_xyz = zeros([rows, 5]);
                dist = zeros([rows, 1]);
                for k = 1:rows
                        points = NaN;
                        while isnan(points)
                                % try a random point
                                u1 = randi(r);
                                v1 = randi(c);
                                points = [u1, v1, data(u1, v1, 1), data(u1, v1, 2), data(u1, v1, 3)];
                        end        
                        temp_xyz(k,:) = points;
                        dist(k) = abs(dot(points(3:5) - temp_xyz0, temp_n));
                end

                temp_num = length(find(dist<=threshold));

                % save new data
                if temp_num > num
                        num = temp_num;
                        xyz = temp_xyz;
                        xyz0 = temp_xyz0;
                        n = temp_n;
                        idx = find(dist<=threshold);
                        if num >= T
                                break
                        end
                end

                % increment counter
                i = i + 1;

        end
        n

        % reshape data format
        unwrap_data = unwrap(data);

        % calculate distance to all points
        distance = abs( (unwrap_data - xyz0) * n' );

        % Double threshold and identify points on plane
        idx = find(distance <= 1.5*threshold);
        [r, ~, ~] = size(data);
        inliers = [mod(idx, r), ceil(idx/r)];

        % plot the best points
        quiver3(xyz0(1), xyz0(2), xyz0(3), 0.1*n(1), 0.1*n(2), 0.1*n(3), 'r')
        plot3(unwrap_data(idx,1), unwrap_data(idx,2), unwrap_data(idx,3), marker)
        model = 0;

end

%% Load model
function [xyz, rgb] = loadScan(file)

        % Load Bunny
        data = load(file);
        rgb = data.ptcloud_rgb;
        xyz = data.ptcloud_xyz;
       
end

%% Plot 3D points
function plotData(data, marker)

        [r, c, ~] = size(data);
        x = data(:,:, 1);
        x = reshape(x, [r*c, 1]);

        y = data(:,:, 2);
        y = reshape(y, [r*c, 1]);

        z = data(:,:, 3);
        z = reshape(z, [r*c, 1]);

        plot3(x,y,z, marker)
end

